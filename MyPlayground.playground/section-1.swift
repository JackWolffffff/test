//
// UntitledView.swift
// Generated by Core Animator version 1.0 on 15/2/28.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class UntitledView : UIView {
    
    
    var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
    var viewsByName: [String : UIView]!
    
    // - MARK: Life Cycle
    
    override init() {
        super.init(frame: CGRect(x: 0, y: 0, width: 1136, height: 768))
        self.setupHierarchy()
    }
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        self.setupHierarchy()
    }
    
    required init(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setupHierarchy()
    }
    
    // - MARK: Scaling
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        if let scalingView = self.viewsByName["__scaling__"] {
            var xScale = self.bounds.size.width / scalingView.bounds.size.width
            var yScale = self.bounds.size.height / scalingView.bounds.size.height
            switch contentMode {
            case .ScaleToFill:
                break
            case .ScaleAspectFill:
                let scale = max(xScale, yScale)
                xScale = scale
                yScale = scale
            default:
                let scale = min(xScale, yScale)
                xScale = scale
                yScale = scale
            }
            scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
            scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
        }
    }
    
    // - MARK: Setup
    
    func setupHierarchy() {
        var viewsByName: [String : UIView] = [:]
        let bundle = NSBundle(forClass:self.dynamicType)
        let __scaling__ = UIView()
        __scaling__.bounds = CGRect(x:0, y:0, width:1136, height:768)
        __scaling__.center = CGPoint(x:568.0, y:384.0)
        self.addSubview(__scaling__)
        viewsByName["__scaling__"] = __scaling__
        
        let untitled = UIView()
        untitled.bounds = CGRect(x:0, y:0, width:180.0, height:180.0)
        untitled.layer.position = CGPoint(x:568.000, y:384.000)
        __scaling__.addSubview(untitled)
        viewsByName["Untitled"] = untitled
        
        let 图标 = UIImageView()
        图标.bounds = CGRect(x:0, y:0, width:180.0, height:180.0)
        var img图标: UIImage!
        if let imagePath = bundle.pathForResource("图标.jpg", ofType:nil) {
            img图标 = UIImage(contentsOfFile:imagePath)
        }
        图标.image = img图标
        图标.contentMode = .Center;
        图标.layer.position = CGPoint(x:90.000, y:90.000)
        untitled.addSubview(图标)
        viewsByName["图标"] = 图标
        
        self.viewsByName = viewsByName
    }
    
    // - MARK: Untitled Animation
    
    func addUntitledAnimation() {
        addUntitledAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, nil)
    }
    
    func addUntitledAnimation(completion: ((Bool) -> Void)?) {
        addUntitledAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion)
    }
    
    func addUntitledAnimation(#removedOnCompletion: Bool) {
        addUntitledAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, nil)
    }
    
    func addUntitledAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        addUntitledAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion)
    }
    
    func addUntitledAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
        let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
        if let complete = completion {
            let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
            representativeAnimation.duration = 9.000
            representativeAnimation.delegate = self
            self.layer.addAnimation(representativeAnimation, forKey: "UntitledAnimation")
            self.animationCompletions[layer.animationForKey("UntitledAnimation")] = complete
        }
        
        let untitledTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
        untitledTranslationXAnimation.duration = 9.000
        untitledTranslationXAnimation.values = [0.000 as Float, 445.268 as Float]
        untitledTranslationXAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
        untitledTranslationXAnimation.timingFunctions = [linearTiming]
        untitledTranslationXAnimation.beginTime = beginTime
        untitledTranslationXAnimation.fillMode = fillMode
        untitledTranslationXAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["Untitled"]?.layer.addAnimation(untitledTranslationXAnimation, forKey:"Untitled Animation_TranslationX")
        
        let untitledTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
        untitledTranslationYAnimation.duration = 9.000
        untitledTranslationYAnimation.values = [0.000 as Float, -277.951 as Float]
        untitledTranslationYAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
        untitledTranslationYAnimation.timingFunctions = [linearTiming]
        untitledTranslationYAnimation.beginTime = beginTime
        untitledTranslationYAnimation.fillMode = fillMode
        untitledTranslationYAnimation.removedOnCompletion = removedOnCompletion
        self.viewsByName["Untitled"]?.layer.addAnimation(untitledTranslationYAnimation, forKey:"Untitled Animation_TranslationY")
    }
    
    func removeUntitledAnimation() {
        self.layer.removeAnimationForKey("UntitledAnimation")
        self.viewsByName["Untitled"]?.layer.removeAnimationForKey("Untitled Animation_TranslationX")
        self.viewsByName["Untitled"]?.layer.removeAnimationForKey("Untitled Animation_TranslationY")
    }
    
    override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
        if let completion = self.animationCompletions[anim] {
            self.animationCompletions.removeValueForKey(anim)
            completion(flag)
        }
    }
    
    func removeAllAnimations() {
        for subview in viewsByName.values {
            subview.layer.removeAllAnimations()
        }
        self.layer.removeAnimationForKey("UntitledAnimation")
    }
}

var view:UIView = UntitledView()